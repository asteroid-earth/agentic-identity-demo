---
- name: Setup awesome agent services
  hosts: all
  remote_user: root
  vars:
    service_name: "{{ app_name }}"
    git_version: "{{ git_sha | default(git_branch) | default('main') }}"

  tasks:
    - name: "hostname"
      command: "hostname"

    - name: Clean up ALL Docker repository configurations
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/docker.list
        - /etc/apt/sources.list.d/docker.list.save
        - /etc/apt/sources.list.d/docker.sources
        - /etc/apt/trusted.gpg.d/docker.gpg
        - /etc/apt/keyrings/docker.gpg
      ignore_errors: yes

    - name: Update apt package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install build essentials and curl
      apt:
        name:
          - curl
          - build-essential
        state: present

    - name: Install n (Node.js version manager)
      shell: |
        curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n
        chmod +x /usr/local/bin/n
      args:
        creates: /usr/local/bin/n

    - name: Install Node.js 24 using nvm
      shell: /usr/local/bin/n 24
      environment:
        N_PREFIX: /usr/local

    - name: Ensure Node.js binaries are in PATH for all users
      lineinfile:
        path: /etc/profile.d/nodejs.sh
        line: 'export PATH="/usr/local/bin:$PATH"'
        create: yes
        mode: '0644'

    - name: Install pnpm 10 globally via npm
      npm:
        name: pnpm
        version: "10"
        global: yes
        state: present
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Check if Docker is already installed
      command: docker --version
      register: docker_installed
      ignore_errors: yes
      changed_when: false

    - name: Install Docker dependencies
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
        update_cache: yes
      when: docker_installed.rc != 0

    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: docker_installed.rc != 0

    - name: Download Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      when: docker_installed.rc != 0

    - name: Add Docker repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      when: docker_installed.rc != 0

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes
      when: docker_installed.rc != 0

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      when: docker_installed.rc != 0

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create agent group
      group:
        name: "{{ app_group }}"
        gid: "{{ app_gid }}"
        state: present

    - name: Create application user
      user:
        name: "{{ app_user }}"
        uid: "{{ app_uid }}"
        group: "{{ app_group }}"
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        create_home: yes
        state: present

    - name: Add tbot dir in temp for sockets
      ansible.builtin.file:
        path: /tmp/tbot
        state: directory
        recurse: yes
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Create config file for tbot
      copy:
        content: |
          version: v2
          proxy_server: {{ teleport_cluster_domain }}:443
          onboarding:
            join_method: iam
            token: {{ teleport_token_iam }}
          storage:
            type: directory
            path: "/home/awesomeagent/tbot"
          services:
          - type: application-tunnel
            app_name: quotes
            listen: tcp://127.0.0.1:3000
          - type: ssh-multiplexer
            destination:
              type: directory
              path: /home/awesomeagent/machine-id
              proxy_command:
              - /usr/local/bin/fdpass-teleport
        dest: /etc/tbot.yaml
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      notify: Restart tbot
    
    - name: Create systemd service file for tbot
      copy:
        content: |
          [Unit]
          Description=tbot - Teleport Machine ID Service
          After=network.target

          [Service]
          Type=simple
          User=awesomeagent
          Group=awesomeagent
          Restart=always
          RestartSec=5
          Environment="TELEPORT_ANONYMOUS_TELEMETRY=1"
          ExecStart=/usr/local/bin/tbot start -c /etc/tbot.yaml
          ExecReload=/bin/kill -HUP $MAINPID
          PIDFile=/run/tbot.pid
          LimitNOFILE=524288

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/tbot.service
        owner: root
        group: root
        mode: '0644'
      notify: Reload systemd

    - name: Start and enable tbot service
      systemd:
        name: tbot
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Create directory for Docker Compose files
      file:
        path: "/home/{{ app_user }}/quotes-service"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Copy Dockerfile for quotes service
      copy:
        src: "{{ playbook_dir }}/../action_support/quotes/Dockerfile"
        dest: "/home/{{ app_user }}/quotes-service/Dockerfile"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Copy docker-compose.yml
      copy:
        src: "{{ playbook_dir }}/templates/docker-compose.yml"
        dest: "/home/{{ app_user }}/quotes-service/docker-compose.yml"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Create Teleport App Service configuration
      template:
        src: "{{ playbook_dir }}/templates/teleport-app.yaml.j2"
        dest: "/home/{{ app_user }}/quotes-service/teleport-app.yaml"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    - name: Build and start quotes service with Docker Compose
      become: yes
      become_user: "{{ app_user }}"
      community.docker.docker_compose_v2:
        project_src: "/home/{{ app_user }}/quotes-service"
        state: present
        pull: always
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Pull latest version of awesome agent
      become: yes
      become_user: "{{ app_user }}"
      git:
        repo: https://github.com/asteroid-earth/agentic-identity-demo.git
        dest: /home/awesomeagent/agentic-identity-demo
        version: "{{ git_version}}"
        update: yes
        force: yes

    - name: Install dependencies package
      become: yes
      become_user: "{{ app_user }}"
      shell: |
        source ~/.bashrc
        pnpm install
      args:
        executable: /bin/bash
        chdir: /home/awesomeagent/agentic-identity-demo

    - name: Build web package
      become: yes
      become_user: "{{ app_user }}"
      shell: |
        source ~/.bashrc
        pnpm build
      args:
        executable: /bin/bash
        chdir: /home/awesomeagent/agentic-identity-demo/packages/web

    - name: Copy web dist to backend directory
      become: yes
      become_user: "{{ app_user }}"
      shell: cp -r ../web/dist ./.web
      args:
        chdir: /home/awesomeagent/agentic-identity-demo/packages/backend
        creates: /home/awesomeagent/agentic-identity-demo/packages/backend/.web

    - name: Validate GOOGLE_API_KEY is provided
      assert:
        that:
          - google_api_key is defined
          - google_api_key | length > 0
          - google_api_key != 'REPLACE_WITH_YOUR_API_KEY'
        fail_msg: "GOOGLE_API_KEY must be provided as a valid API key via -e google_api_key=..."
        quiet: true

    - name: Create systemd service file for awesome agent
      copy:
        dest: /etc/systemd/system/{{ service_name }}.service
        content: |
          [Unit]
          Description=Agentic Identity Demo
          After=network.target tbot.service
          Requires=tbot.service

          [Service]
          Type=simple
          User={{ app_user }}
          Group={{ app_group }}
          WorkingDirectory=/home/awesomeagent/agentic-identity-demo/packages/backend
          Environment="GOOGLE_API_KEY={{ google_api_key }}"
          Environment="SSH_TARGET_HOST={{ teleport_ssh_target }}"
          Environment="SSH_CONFIG_PATH=/home/awesomeagent/machine-id/ssh_config"
          Environment="QUOTES_API_URL=http://localhost:3000/api/quotes/random"
          Environment="PATH=/usr/bin:/bin:/usr/local/bin"
          Environment="NODE_ENV=production"
          ExecStart=/usr/local/bin/node --import jiti/register main.ts
          Restart=always
          RestartSec=5
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier={{ service_name }}

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      notify:
        - Reload systemd
        - Restart service

  handlers:
    - name: Restart tbot
      systemd:
        name: tbot
        state: restarted
        enabled: yes
      when: ansible_facts.services['tbot.service'] is defined
    - name: Reload systemd
      systemd:
        daemon_reload: yes
    - name: Restart service
      systemd:
        name: "{{ service_name }}"
        enabled: yes
        state: restarted
        daemon_reload: yes
name: Build and Deploy Awesome Agent Demo

on:
  push:
    branches: [ main, 'develop' ]
    paths:
      - 'packages/**'
      - 'ansible/**'
      - '.github/**'
      - 'action_support/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/**'

jobs:
  # Deploy using Ansible
  deploy-ansible:
    name: Deploy Awesome Agent app with Ansible
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load configuration
        id: config
        run: |
          pip install pyyaml
          python3 << 'EOF'
          import yaml
          import os
          with open('config.yaml', 'r') as f:
              config = yaml.safe_load(f)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f"teleport_cluster={config['teleport']['cluster_domain']}", file=fh)
              print(f"teleport_token={config['teleport']['tokens']['github_actions']}", file=fh)
              print(f"teleport_token_iam={config['teleport']['tokens']['iam_instance']}", file=fh)
              print(f"teleport_ssh_target={config['teleport']['ssh_target']}", file=fh)
              print(f"app_name={config['app']['name']}", file=fh)
              print(f"app_user={config['app']['user']}", file=fh)
              print(f"app_group={config['app']['group']}", file=fh)
              print(f"app_uid={config['app']['uid']}", file=fh)
              print(f"app_gid={config['app']['gid']}", file=fh)
          EOF

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Setup Teleport authentication
        run: |
          wget https://rolesanywhere.amazonaws.com/releases/1.5.0/X86_64/Linux/aws_signing_helper
          chmod +x aws_signing_helper

      - name: Fetch Teleport binaries
        uses: teleport-actions/setup@v1
        with:
          version: 18.1.5

      - name: Update bot.yaml with config values
        run: |
          sed -i "s|proxy_server:.*|proxy_server: ${{ steps.config.outputs.teleport_cluster }}:443|g" ./action_support/bot.yaml
          sed -i "s|token:.*|token: ${{ steps.config.outputs.teleport_token }}|g" ./action_support/bot.yaml

      - name: Authenticate with Teleport
        run: |
          tbot start --oneshot -c ./action_support/bot.yaml

      - name: Debug Teleport SSH configuration
        run: |
          echo "=== Generated SSH Config ==="
          cat ./ssh-out/ssh_config
          echo ""
          echo "=== Ansible Inventory ==="
          cat ./ansible/hosts
          echo ""
          echo "=== SSH Certificate Info ==="
          ssh-keygen -L -f ./ssh-out/key-cert.pub || true

      - name: Deploy awesome agent application
        env:
          ANSIBLE_CONFIG: ./action_support/ansible.cfg
        run: |
          ansible-playbook -i ./ansible/hosts ./ansible/agent.yml \
            -e "git_sha=${{ github.sha }}" \
            -e "teleport_cluster_domain=${{ steps.config.outputs.teleport_cluster }}" \
            -e "teleport_token_iam=${{ steps.config.outputs.teleport_token_iam }}" \
            -e "teleport_ssh_target=${{ steps.config.outputs.teleport_ssh_target }}" \
            -e "app_name=${{ steps.config.outputs.app_name }}" \
            -e "app_user=${{ steps.config.outputs.app_user }}" \
            -e "app_group=${{ steps.config.outputs.app_group }}" \
            -e "app_uid=${{ steps.config.outputs.app_uid }}" \
            -e "app_gid=${{ steps.config.outputs.app_gid }}"